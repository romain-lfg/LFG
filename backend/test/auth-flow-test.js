/**
 * Authentication Flow Test Script
 * 
 * This script tests the complete authentication flow including:
 * 1. Token verification
 * 2. User data synchronization
 * 3. Protected route access
 * 4. Role-based access control
 * 
 * Usage:
 * node test/auth-flow-test.js
 */

import axios from 'axios';
import chalk from 'chalk';
import jwt from 'jsonwebtoken';
import { v4 as uuidv4 } from 'uuid';

// Configuration
const API_URL = process.env.API_URL || 'http://localhost:3002';
const TEST_USER_ID = process.env.TEST_USER_ID || uuidv4();
const TEST_WALLET_ADDRESS = process.env.TEST_WALLET_ADDRESS || '0x' + '1'.repeat(40);
const TEST_EMAIL = process.env.TEST_EMAIL || 'test@example.com';

// Mock JWT generation
const generateMockToken = (userId, role = 'user') => {
  // This is a mock token for testing only
  // In production, tokens are generated by Privy
  const payload = {
    userId,
    appId: 'test-app-id',
    role,
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + 3600, // 1 hour expiration
  };

  // This is a mock secret for testing only
  const secret = 'test-secret';
  
  return jwt.sign(payload, secret);
};

// Test API client
const api = axios.create({
  baseURL: API_URL,
  validateStatus: () => true, // Don't throw on non-2xx responses
});

// Test runner
const runTests = async () => {
  console.log(chalk.blue('🔍 Starting Authentication Flow Tests'));
  console.log(chalk.gray(`API URL: ${API_URL}`));
  console.log(chalk.gray(`Test User ID: ${TEST_USER_ID}`));
  console.log(chalk.gray(`Test Wallet Address: ${TEST_WALLET_ADDRESS}`));
  console.log(chalk.gray(`Test Email: ${TEST_EMAIL}`));
  console.log();

  // Health check
  try {
    console.log(chalk.blue('1️⃣ Testing API Health'));
    const healthResponse = await api.get('/api/health');
    
    if (healthResponse.status === 200) {
      console.log(chalk.green('✅ API is healthy'));
    } else {
      console.log(chalk.red(`❌ API health check failed: ${healthResponse.status}`));
      console.log(chalk.gray(`Response: ${JSON.stringify(healthResponse.data)}`));
      process.exit(1);
    }
  } catch (error) {
    console.log(chalk.red(`❌ API health check error: ${error.message}`));
    process.exit(1);
  }
  
  console.log();

  // Test 1: Access protected route without authentication
  try {
    console.log(chalk.blue('2️⃣ Testing Protected Route Without Authentication'));
    const unauthResponse = await api.get('/api/users/profile');
    
    if (unauthResponse.status === 401) {
      console.log(chalk.green('✅ Correctly rejected unauthenticated request'));
    } else {
      console.log(chalk.red(`❌ Failed to reject unauthenticated request: ${unauthResponse.status}`));
      console.log(chalk.gray(`Response: ${JSON.stringify(unauthResponse.data)}`));
    }
  } catch (error) {
    console.log(chalk.red(`❌ Error testing unauthenticated access: ${error.message}`));
  }
  
  console.log();

  // Test 2: User sync with authentication
  try {
    console.log(chalk.blue('3️⃣ Testing User Sync with Authentication'));
    const token = generateMockToken(TEST_USER_ID);
    
    const syncResponse = await api.post('/api/users/sync', {
      walletAddress: TEST_WALLET_ADDRESS,
      email: TEST_EMAIL,
      metadata: {
        name: 'Test User',
      },
    }, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    
    if (syncResponse.status === 200 && syncResponse.data.user) {
      console.log(chalk.green('✅ Successfully synced user data'));
      console.log(chalk.gray(`User ID: ${syncResponse.data.user.id}`));
      console.log(chalk.gray(`Wallet Address: ${syncResponse.data.user.walletAddress}`));
      console.log(chalk.gray(`Email: ${syncResponse.data.user.email}`));
    } else {
      console.log(chalk.red(`❌ Failed to sync user data: ${syncResponse.status}`));
      console.log(chalk.gray(`Response: ${JSON.stringify(syncResponse.data)}`));
    }
  } catch (error) {
    console.log(chalk.red(`❌ Error syncing user data: ${error.message}`));
  }
  
  console.log();

  // Test 3: Get user profile with authentication
  try {
    console.log(chalk.blue('4️⃣ Testing User Profile with Authentication'));
    const token = generateMockToken(TEST_USER_ID);
    
    const profileResponse = await api.get('/api/users/profile', {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    
    if (profileResponse.status === 200 && profileResponse.data.user) {
      console.log(chalk.green('✅ Successfully retrieved user profile'));
      console.log(chalk.gray(`User ID: ${profileResponse.data.user.id}`));
      console.log(chalk.gray(`Wallet Address: ${profileResponse.data.user.walletAddress}`));
      console.log(chalk.gray(`Email: ${profileResponse.data.user.email}`));
    } else {
      console.log(chalk.red(`❌ Failed to retrieve user profile: ${profileResponse.status}`));
      console.log(chalk.gray(`Response: ${JSON.stringify(profileResponse.data)}`));
    }
  } catch (error) {
    console.log(chalk.red(`❌ Error retrieving user profile: ${error.message}`));
  }
  
  console.log();

  // Test 4: Role-based access control
  try {
    console.log(chalk.blue('5️⃣ Testing Role-Based Access Control'));
    
    // Test with user role
    const userToken = generateMockToken(TEST_USER_ID, 'user');
    const userResponse = await api.get('/api/admin/users', {
      headers: {
        Authorization: `Bearer ${userToken}`,
      },
    });
    
    if (userResponse.status === 403) {
      console.log(chalk.green('✅ Correctly rejected user access to admin route'));
    } else {
      console.log(chalk.red(`❌ Failed to reject user access to admin route: ${userResponse.status}`));
      console.log(chalk.gray(`Response: ${JSON.stringify(userResponse.data)}`));
    }
    
    // Test with admin role
    const adminToken = generateMockToken(TEST_USER_ID, 'admin');
    const adminResponse = await api.get('/api/admin/users', {
      headers: {
        Authorization: `Bearer ${adminToken}`,
      },
    });
    
    if (adminResponse.status === 200) {
      console.log(chalk.green('✅ Successfully allowed admin access to admin route'));
    } else {
      console.log(chalk.red(`❌ Failed to allow admin access to admin route: ${adminResponse.status}`));
      console.log(chalk.gray(`Response: ${JSON.stringify(adminResponse.data)}`));
    }
  } catch (error) {
    console.log(chalk.red(`❌ Error testing role-based access control: ${error.message}`));
  }
  
  console.log();

  // Test 5: Token expiration
  try {
    console.log(chalk.blue('6️⃣ Testing Token Expiration'));
    
    // Create an expired token
    const expiredPayload = {
      userId: TEST_USER_ID,
      appId: 'test-app-id',
      iat: Math.floor(Date.now() / 1000) - 7200, // 2 hours ago
      exp: Math.floor(Date.now() / 1000) - 3600, // 1 hour ago
    };
    
    const expiredToken = jwt.sign(expiredPayload, 'test-secret');
    
    const expiredResponse = await api.get('/api/users/profile', {
      headers: {
        Authorization: `Bearer ${expiredToken}`,
      },
    });
    
    if (expiredResponse.status === 401) {
      console.log(chalk.green('✅ Correctly rejected expired token'));
    } else {
      console.log(chalk.red(`❌ Failed to reject expired token: ${expiredResponse.status}`));
      console.log(chalk.gray(`Response: ${JSON.stringify(expiredResponse.data)}`));
    }
  } catch (error) {
    console.log(chalk.red(`❌ Error testing token expiration: ${error.message}`));
  }
  
  console.log();

  // Test 6: Invalid token format
  try {
    console.log(chalk.blue('7️⃣ Testing Invalid Token Format'));
    
    const invalidResponse = await api.get('/api/users/profile', {
      headers: {
        Authorization: 'Bearer invalid-token',
      },
    });
    
    if (invalidResponse.status === 401) {
      console.log(chalk.green('✅ Correctly rejected invalid token'));
    } else {
      console.log(chalk.red(`❌ Failed to reject invalid token: ${invalidResponse.status}`));
      console.log(chalk.gray(`Response: ${JSON.stringify(invalidResponse.data)}`));
    }
  } catch (error) {
    console.log(chalk.red(`❌ Error testing invalid token: ${error.message}`));
  }
  
  console.log();

  // Test 7: Missing token
  try {
    console.log(chalk.blue('8️⃣ Testing Missing Token'));
    
    const missingResponse = await api.get('/api/users/profile', {
      headers: {
        // No Authorization header
      },
    });
    
    if (missingResponse.status === 401) {
      console.log(chalk.green('✅ Correctly rejected missing token'));
    } else {
      console.log(chalk.red(`❌ Failed to reject missing token: ${missingResponse.status}`));
      console.log(chalk.gray(`Response: ${JSON.stringify(missingResponse.data)}`));
    }
  } catch (error) {
    console.log(chalk.red(`❌ Error testing missing token: ${error.message}`));
  }
  
  console.log();

  // Summary
  console.log(chalk.blue('🏁 Authentication Flow Test Summary'));
  console.log(chalk.green('✅ Tests completed'));
  console.log(chalk.gray('Review the results above to ensure all tests passed.'));
  console.log(chalk.gray('If any tests failed, check the error messages and fix the issues.'));
};

// Run the tests
runTests().catch(error => {
  console.error(chalk.red(`❌ Unhandled error: ${error.message}`));
  console.error(error.stack);
  process.exit(1);
});
